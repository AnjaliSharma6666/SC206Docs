
package com.microfocus.silkcentral.webservices.requirements.stubs;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RequirementsService", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface RequirementsService {


    /**
     * 
     * @param sessionId
     * @param requirementId
     * @param propertyId
     * @return
     *     returns com.microfocus.silkcentral.webservices.requirements.stubs.PropertyValue
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetProperty")
    @ResponseWrapper(localName = "getPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProperty/Fault/WSFaultException")
    })
    public PropertyValue getProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "propertyId", targetNamespace = "")
        String propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param requirementId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.requirements.stubs.Requirement>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRequirementChildren", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetRequirementChildren")
    @ResponseWrapper(localName = "getRequirementChildrenResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetRequirementChildrenResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirementChildrenRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirementChildrenResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirementChildren/Fault/WSFaultException")
    })
    public List<Requirement> getRequirementChildren(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId)
        throws WSFaultException
    ;

    /**
     * 
     * @param comments
     * @param flagType
     * @param includeChildren
     * @param sessionId
     * @param requirementId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "setRequirementFlagStatus", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.SetRequirementFlagStatus")
    @ResponseWrapper(localName = "setRequirementFlagStatusResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.SetRequirementFlagStatusResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/setRequirementFlagStatusRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/setRequirementFlagStatusResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/setRequirementFlagStatus/Fault/WSFaultException")
    })
    public void setRequirementFlagStatus(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "flagType", targetNamespace = "")
        int flagType,
        @WebParam(name = "includeChildren", targetNamespace = "")
        Boolean includeChildren,
        @WebParam(name = "comments", targetNamespace = "")
        String comments)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.requirements.stubs.Requirement>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTopLevelRequirements", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetTopLevelRequirements")
    @ResponseWrapper(localName = "getTopLevelRequirementsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetTopLevelRequirementsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getTopLevelRequirementsRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getTopLevelRequirementsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getTopLevelRequirements/Fault/WSFaultException")
    })
    public List<Requirement> getTopLevelRequirements(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param recursiv
     * @param sessionId
     * @param requirementId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteRequirement", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.DeleteRequirement")
    @ResponseWrapper(localName = "deleteRequirementResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.DeleteRequirementResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteRequirementRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteRequirementResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteRequirement/Fault/WSFaultException")
    })
    public void deleteRequirement(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "recursiv", targetNamespace = "")
        boolean recursiv)
        throws WSFaultException
    ;

    /**
     * 
     * @param newProperty
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "insertCustomProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.InsertCustomProperty")
    @ResponseWrapper(localName = "insertCustomPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.InsertCustomPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/insertCustomPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/insertCustomPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/insertCustomProperty/Fault/WSFaultException")
    })
    public void insertCustomProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "newProperty", targetNamespace = "")
        CustomProperty newProperty)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param propertyId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteCustomProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.DeleteCustomProperty")
    @ResponseWrapper(localName = "deleteCustomPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.DeleteCustomPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteCustomPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteCustomPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/deleteCustomProperty/Fault/WSFaultException")
    })
    public void deleteCustomProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "propertyId", targetNamespace = "")
        int propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.requirements.stubs.CustomProperty>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomProperties", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetCustomProperties")
    @ResponseWrapper(localName = "getCustomPropertiesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetCustomPropertiesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomPropertiesRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomPropertiesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomProperties/Fault/WSFaultException")
    })
    public List<CustomProperty> getCustomProperties(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param requirement
     * @param projectId
     * @param prevSiblingId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateRequirement", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdateRequirement")
    @ResponseWrapper(localName = "updateRequirementResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdateRequirementResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updateRequirementRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updateRequirementResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updateRequirement/Fault/WSFaultException")
    })
    public int updateRequirement(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "requirement", targetNamespace = "")
        Requirement requirement,
        @WebParam(name = "prevSiblingId", targetNamespace = "")
        int prevSiblingId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param propertyId
     * @return
     *     returns com.microfocus.silkcentral.webservices.requirements.stubs.CustomProperty
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetCustomProperty")
    @ResponseWrapper(localName = "getCustomPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetCustomPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getCustomProperty/Fault/WSFaultException")
    })
    public CustomProperty getCustomProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "propertyId", targetNamespace = "")
        int propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns com.microfocus.silkcentral.webservices.requirements.stubs.Project
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProject", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetProject")
    @ResponseWrapper(localName = "getProjectResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetProjectResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProjectRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProjectResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProject/Fault/WSFaultException")
    })
    public Project getProject(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param plainPwd
     * @param username
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "logonUser", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.LogonUser")
    @ResponseWrapper(localName = "logonUserResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.LogonUserResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/logonUserRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/logonUserResponse")
    public String logonUser(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "plainPwd", targetNamespace = "")
        String plainPwd);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.requirements.stubs.Project>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjects", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetProjects")
    @ResponseWrapper(localName = "getProjectsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetProjectsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProjectsRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProjectsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getProjects/Fault/WSFaultException")
    })
    public List<Project> getProjects(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @param propertyId
     * @return
     *     returns com.microfocus.silkcentral.webservices.requirements.stubs.PropertyMetaInfo
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyInfo", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetPropertyInfo")
    @ResponseWrapper(localName = "getPropertyInfoResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetPropertyInfoResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyInfoRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyInfoResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyInfo/Fault/WSFaultException")
    })
    public PropertyMetaInfo getPropertyInfo(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "propertyId", targetNamespace = "")
        String propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyIds", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetPropertyIds")
    @ResponseWrapper(localName = "getPropertyIdsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetPropertyIdsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyIdsRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyIdsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getPropertyIds/Fault/WSFaultException")
    })
    public List<String> getPropertyIds(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param sessionId
     * @param requirementId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "assignTest", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.AssignTest")
    @ResponseWrapper(localName = "assignTestResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.AssignTestResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/assignTestRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/assignTestResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/assignTest/Fault/WSFaultException")
    })
    public void assignTest(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param requirementId
     * @param properties
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "updateProperties", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdateProperties")
    @ResponseWrapper(localName = "updatePropertiesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdatePropertiesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updatePropertiesRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updatePropertiesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updateProperties/Fault/WSFaultException")
    })
    public void updateProperties(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "properties", targetNamespace = "")
        List<PropertyValue> properties)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param requirementId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.requirements.stubs.Test>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAssignedTests", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetAssignedTests")
    @ResponseWrapper(localName = "getAssignedTestsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetAssignedTestsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getAssignedTestsRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getAssignedTestsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getAssignedTests/Fault/WSFaultException")
    })
    public List<Test> getAssignedTests(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param sessionId
     * @param requirementId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "unassignTest", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UnassignTest")
    @ResponseWrapper(localName = "unassignTestResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UnassignTestResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/unassignTestRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/unassignTestResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/unassignTest/Fault/WSFaultException")
    })
    public void unassignTest(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId)
        throws WSFaultException
    ;

    /**
     * 
     * @param property
     * @param sessionId
     * @param requirementId
     * @return
     *     returns java.lang.String
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdateProperty")
    @ResponseWrapper(localName = "updatePropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.UpdatePropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updatePropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updatePropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/updateProperty/Fault/WSFaultException")
    })
    public String updateProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId,
        @WebParam(name = "property", targetNamespace = "")
        PropertyValue property)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param requirementId
     * @return
     *     returns com.microfocus.silkcentral.webservices.requirements.stubs.Requirement
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRequirement", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetRequirement")
    @ResponseWrapper(localName = "getRequirementResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/requirements", className = "com.microfocus.silkcentral.webservices.requirements.stubs.GetRequirementResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirementRequest", output = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirementResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/requirements/RequirementsService/getRequirement/Fault/WSFaultException")
    })
    public Requirement getRequirement(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "requirementId", targetNamespace = "")
        int requirementId)
        throws WSFaultException
    ;

}
