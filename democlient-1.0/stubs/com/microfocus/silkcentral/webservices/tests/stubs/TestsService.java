
package com.microfocus.silkcentral.webservices.tests.stubs;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "TestsService", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TestsService {


    /**
     * 
     * @param sessionId
     * @param nodeId
     * @param propertyId
     * @return
     *     returns com.microfocus.silkcentral.webservices.tests.stubs.PropertyValue
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetProperty")
    @ResponseWrapper(localName = "getPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProperty/Fault/WSFaultException")
    })
    public PropertyValue getProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "nodeId", targetNamespace = "")
        int nodeId,
        @WebParam(name = "propertyId", targetNamespace = "")
        String propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.ProjectAttribute>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAttributes", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetAttributes")
    @ResponseWrapper(localName = "getAttributesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetAttributesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getAttributesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getAttributesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getAttributes/Fault/WSFaultException")
    })
    public List<ProjectAttribute> getAttributes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param nodeId
     * @return
     *     returns com.microfocus.silkcentral.webservices.tests.stubs.PlanningNode
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNode", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNode")
    @ResponseWrapper(localName = "getNodeResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNodeResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNode/Fault/WSFaultException")
    })
    public PlanningNode getNode(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "nodeId", targetNamespace = "")
        int nodeId)
        throws WSFaultException
    ;

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.ProjectAttribute>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addAttributes", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddAttributes")
    @ResponseWrapper(localName = "addAttributesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddAttributesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributes/Fault/WSFaultException")
    })
    public List<ProjectAttribute> addAttributes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<ProjectAttribute> attributes)
        throws WSFaultException
    ;

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.ProjectAttribute>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateAttributes", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateAttributes")
    @ResponseWrapper(localName = "updateAttributesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateAttributesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateAttributesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateAttributesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateAttributes/Fault/WSFaultException")
    })
    public List<ProjectAttribute> updateAttributes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<ProjectAttribute> attributes)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIntegrationDefaultFolderId", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetIntegrationDefaultFolderId")
    @ResponseWrapper(localName = "getIntegrationDefaultFolderIdResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetIntegrationDefaultFolderIdResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getIntegrationDefaultFolderIdRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getIntegrationDefaultFolderIdResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getIntegrationDefaultFolderId/Fault/WSFaultException")
    })
    public int getIntegrationDefaultFolderId(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @param folderId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "setIntegrationDefaultFolder", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.SetIntegrationDefaultFolder")
    @ResponseWrapper(localName = "setIntegrationDefaultFolderResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.SetIntegrationDefaultFolderResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/setIntegrationDefaultFolderRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/setIntegrationDefaultFolderResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/setIntegrationDefaultFolder/Fault/WSFaultException")
    })
    public void setIntegrationDefaultFolder(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "folderId", targetNamespace = "")
        int folderId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.NamedEntity>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTestContainers", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetTestContainers")
    @ResponseWrapper(localName = "getTestContainersResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetTestContainersResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getTestContainersRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getTestContainersResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getTestContainers/Fault/WSFaultException")
    })
    public List<NamedEntity> getTestContainers(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param sessionId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.ManualTestStep>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getManualTestSteps", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetManualTestSteps")
    @ResponseWrapper(localName = "getManualTestStepsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetManualTestStepsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getManualTestStepsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getManualTestStepsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getManualTestSteps/Fault/WSFaultException")
    })
    public List<ManualTestStep> getManualTestSteps(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @param propertyId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteCustomStepProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteCustomStepProperty")
    @ResponseWrapper(localName = "deleteCustomStepPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteCustomStepPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteCustomStepPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteCustomStepPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteCustomStepProperty/Fault/WSFaultException")
    })
    public int deleteCustomStepProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "propertyId", targetNamespace = "")
        int propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param propertyTypeId
     * @param sessionId
     * @param projectId
     * @param nodeTypeId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyIdsByNodeType", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyIdsByNodeType")
    @ResponseWrapper(localName = "getPropertyIdsByNodeTypeResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyIdsByNodeTypeResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIdsByNodeTypeRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIdsByNodeTypeResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIdsByNodeType/Fault/WSFaultException")
    })
    public List<String> getPropertyIdsByNodeType(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "nodeTypeId", targetNamespace = "")
        String nodeTypeId,
        @WebParam(name = "propertyTypeId", targetNamespace = "")
        String propertyTypeId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param stepPos
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteManualTestStep", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteManualTestStep")
    @ResponseWrapper(localName = "deleteManualTestStepResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteManualTestStepResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteManualTestStepRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteManualTestStepResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteManualTestStep/Fault/WSFaultException")
    })
    public void deleteManualTestStep(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId,
        @WebParam(name = "stepPos", targetNamespace = "")
        int stepPos)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.CustomStepProperty>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomStepPropertyNames", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetCustomStepPropertyNames")
    @ResponseWrapper(localName = "getCustomStepPropertyNamesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetCustomStepPropertyNamesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getCustomStepPropertyNamesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getCustomStepPropertyNamesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getCustomStepPropertyNames/Fault/WSFaultException")
    })
    public List<CustomStepProperty> getCustomStepPropertyNames(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @param nodeTypeId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyTypeIds", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyTypeIds")
    @ResponseWrapper(localName = "getPropertyTypeIdsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyTypeIdsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyTypeIdsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyTypeIdsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyTypeIds/Fault/WSFaultException")
    })
    public List<String> getPropertyTypeIds(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "nodeTypeId", targetNamespace = "")
        String nodeTypeId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param step
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "addManualTestStep", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddManualTestStep")
    @ResponseWrapper(localName = "addManualTestStepResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddManualTestStepResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTestStepRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTestStepResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTestStep/Fault/WSFaultException")
    })
    public void addManualTestStep(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId,
        @WebParam(name = "step", targetNamespace = "")
        ManualTestStep step)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param step
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "updateManualTestStep", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateManualTestStep")
    @ResponseWrapper(localName = "updateManualTestStepResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateManualTestStepResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateManualTestStepRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateManualTestStepResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateManualTestStep/Fault/WSFaultException")
    })
    public void updateManualTestStep(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId,
        @WebParam(name = "step", targetNamespace = "")
        ManualTestStep step)
        throws WSFaultException
    ;

    /**
     * 
     * @param sequence
     * @param propertyname
     * @param sessionId
     * @param projectId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addCustomStepProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddCustomStepProperty")
    @ResponseWrapper(localName = "addCustomStepPropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddCustomStepPropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addCustomStepPropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addCustomStepPropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addCustomStepProperty/Fault/WSFaultException")
    })
    public int addCustomStepProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "sequence", targetNamespace = "")
        int sequence,
        @WebParam(name = "propertyname", targetNamespace = "")
        String propertyname)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns com.microfocus.silkcentral.webservices.tests.stubs.Project
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProject", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetProject")
    @ResponseWrapper(localName = "getProjectResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetProjectResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProjectRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProjectResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProject/Fault/WSFaultException")
    })
    public Project getProject(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param node
     * @param parentNodeId
     * @param sessionId
     * @param projectId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addNode", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddNode")
    @ResponseWrapper(localName = "addNodeResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddNodeResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addNodeRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addNodeResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addNode/Fault/WSFaultException")
    })
    public int addNode(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "parentNodeId", targetNamespace = "")
        int parentNodeId,
        @WebParam(name = "node", targetNamespace = "")
        PlanningNode node)
        throws WSFaultException
    ;

    /**
     * 
     * @param options
     * @param attributeName
     * @param sessionId
     * @param projectId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteAttributeOptions", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteAttributeOptions")
    @ResponseWrapper(localName = "deleteAttributeOptionsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteAttributeOptionsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributeOptionsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributeOptionsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributeOptions/Fault/WSFaultException")
    })
    public void deleteAttributeOptions(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "options", targetNamespace = "")
        List<AttributeOption> options)
        throws WSFaultException
    ;

    /**
     * 
     * @param options
     * @param attributeName
     * @param sessionId
     * @param projectId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "addAttributeOptions", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddAttributeOptions")
    @ResponseWrapper(localName = "addAttributeOptionsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddAttributeOptionsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributeOptionsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributeOptionsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addAttributeOptions/Fault/WSFaultException")
    })
    public void addAttributeOptions(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "options", targetNamespace = "")
        List<AttributeOption> options)
        throws WSFaultException
    ;

    /**
     * 
     * @param filter
     * @param parentNodeId
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.PlanningNode>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildNodes", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetChildNodes")
    @ResponseWrapper(localName = "getChildNodesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetChildNodesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getChildNodesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getChildNodesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getChildNodes/Fault/WSFaultException")
    })
    public List<PlanningNode> getChildNodes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "parentNodeId", targetNamespace = "")
        int parentNodeId,
        @WebParam(name = "filter", targetNamespace = "")
        NodeFilter filter)
        throws WSFaultException
    ;

    /**
     * 
     * @param plainPwd
     * @param username
     * @return
     *     returns java.lang.String
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "logonUser", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.LogonUser")
    @ResponseWrapper(localName = "logonUserResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.LogonUserResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/logonUserRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/logonUserResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/logonUser/Fault/WSFaultException")
    })
    public String logonUser(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "plainPwd", targetNamespace = "")
        String plainPwd)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.Project>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjects", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetProjects")
    @ResponseWrapper(localName = "getProjectsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetProjectsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProjectsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProjectsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getProjects/Fault/WSFaultException")
    })
    public List<Project> getProjects(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @param nodeTypeId
     * @param propertyId
     * @return
     *     returns com.microfocus.silkcentral.webservices.tests.stubs.PropertyMetaInfo
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyInfo", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyInfo")
    @ResponseWrapper(localName = "getPropertyInfoResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyInfoResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyInfoRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyInfoResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyInfo/Fault/WSFaultException")
    })
    public PropertyMetaInfo getPropertyInfo(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "nodeTypeId", targetNamespace = "")
        String nodeTypeId,
        @WebParam(name = "propertyId", targetNamespace = "")
        String propertyId)
        throws WSFaultException
    ;

    /**
     * 
     * @param testId
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "convertToManualTest", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.ConvertToManualTest")
    @ResponseWrapper(localName = "convertToManualTestResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.ConvertToManualTestResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/convertToManualTestRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/convertToManualTestResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/convertToManualTest/Fault/WSFaultException")
    })
    public void convertToManualTest(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<java.lang.Integer>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLibraryIdsForProject", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetLibraryIdsForProject")
    @ResponseWrapper(localName = "getLibraryIdsForProjectResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetLibraryIdsForProjectResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryIdsForProjectRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryIdsForProjectResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryIdsForProject/Fault/WSFaultException")
    })
    public List<Integer> getLibraryIdsForProject(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLibraryNamesForProject", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetLibraryNamesForProject")
    @ResponseWrapper(localName = "getLibraryNamesForProjectResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetLibraryNamesForProjectResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryNamesForProjectRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryNamesForProjectResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getLibraryNamesForProject/Fault/WSFaultException")
    })
    public List<String> getLibraryNamesForProject(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param projectId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.DataSource>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDataSourcesForProject", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetDataSourcesForProject")
    @ResponseWrapper(localName = "getDataSourcesForProjectResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetDataSourcesForProjectResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSourcesForProjectRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSourcesForProjectResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSourcesForProject/Fault/WSFaultException")
    })
    public List<DataSource> getDataSourcesForProject(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId)
        throws WSFaultException
    ;

    /**
     * 
     * @param dataSourceId
     * @param sessionId
     * @return
     *     returns java.util.List<com.microfocus.silkcentral.webservices.tests.stubs.DataSet>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDataSetForDataSource", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetDataSetForDataSource")
    @ResponseWrapper(localName = "getDataSetForDataSourceResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetDataSetForDataSourceResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSetForDataSourceRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSetForDataSourceResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getDataSetForDataSource/Fault/WSFaultException")
    })
    public List<DataSet> getDataSetForDataSource(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "dataSourceId", targetNamespace = "")
        int dataSourceId)
        throws WSFaultException
    ;

    /**
     * 
     * @param xmlPackage
     * @param packageNodeId
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "updateTestPackage", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateTestPackage")
    @ResponseWrapper(localName = "updateTestPackageResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateTestPackageResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateTestPackageRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateTestPackageResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateTestPackage/Fault/WSFaultException")
    })
    public void updateTestPackage(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "packageNodeId", targetNamespace = "")
        int packageNodeId,
        @WebParam(name = "xmlPackage", targetNamespace = "")
        String xmlPackage)
        throws WSFaultException
    ;

    /**
     * 
     * @param xmlPackage
     * @param packageNodeId
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "uploadTestPackageResult", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UploadTestPackageResult")
    @ResponseWrapper(localName = "uploadTestPackageResultResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UploadTestPackageResultResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/uploadTestPackageResultRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/uploadTestPackageResultResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/uploadTestPackageResult/Fault/WSFaultException")
    })
    public void uploadTestPackageResult(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "packageNodeId", targetNamespace = "")
        int packageNodeId,
        @WebParam(name = "xmlPackage", targetNamespace = "")
        String xmlPackage)
        throws WSFaultException
    ;

    /**
     * 
     * @param xmlPackage
     * @param sessionId
     * @param packageParentNodeId
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createTestPackage", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.CreateTestPackage")
    @ResponseWrapper(localName = "createTestPackageResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.CreateTestPackageResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/createTestPackageRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/createTestPackageResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/createTestPackage/Fault/WSFaultException")
    })
    public int createTestPackage(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "packageParentNodeId", targetNamespace = "")
        int packageParentNodeId,
        @WebParam(name = "xmlPackage", targetNamespace = "")
        String xmlPackage)
        throws WSFaultException
    ;

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param projectId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteAttributes", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteAttributes")
    @ResponseWrapper(localName = "deleteAttributesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteAttributesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteAttributes/Fault/WSFaultException")
    })
    public void deleteAttributes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "projectId", targetNamespace = "")
        int projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<ProjectAttribute> attributes)
        throws WSFaultException
    ;

    /**
     * 
     * @param node
     * @param sessionId
     * @return
     *     returns boolean
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateNode", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateNode")
    @ResponseWrapper(localName = "updateNodeResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateNodeResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateNodeRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateNodeResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateNode/Fault/WSFaultException")
    })
    public boolean updateNode(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "node", targetNamespace = "")
        PlanningNode node)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param nodeId
     * @return
     *     returns boolean
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteNode", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteNode")
    @ResponseWrapper(localName = "deleteNodeResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteNodeResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteNodeRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteNodeResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteNode/Fault/WSFaultException")
    })
    public boolean deleteNode(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "nodeId", targetNamespace = "")
        int nodeId)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPropertyIds", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyIds")
    @ResponseWrapper(localName = "getPropertyIdsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetPropertyIdsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIdsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIdsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getPropertyIds/Fault/WSFaultException")
    })
    public List<String> getPropertyIds(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws WSFaultException
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param testContainerId
     * @param params
     * @param steps
     * @return
     *     returns int
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addManualTest", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddManualTest")
    @ResponseWrapper(localName = "addManualTestResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AddManualTestResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTestRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTestResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/addManualTest/Fault/WSFaultException")
    })
    public int addManualTest(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testContainerId", targetNamespace = "")
        int testContainerId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "steps", targetNamespace = "")
        List<ManualTestStep> steps,
        @WebParam(name = "params", targetNamespace = "")
        List<NodeParameter> params)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @param properties
     * @return
     *     returns boolean
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateProperties", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateProperties")
    @ResponseWrapper(localName = "updatePropertiesResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdatePropertiesResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updatePropertiesRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updatePropertiesResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateProperties/Fault/WSFaultException")
    })
    public boolean updateProperties(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "properties", targetNamespace = "")
        List<PropertyValue> properties)
        throws WSFaultException
    ;

    /**
     * 
     * @param property
     * @param sessionId
     * @return
     *     returns java.util.List<java.lang.Integer>
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNodeIds", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNodeIds")
    @ResponseWrapper(localName = "getNodeIdsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNodeIdsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeIdsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeIdsResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeIds/Fault/WSFaultException")
    })
    public List<Integer> getNodeIds(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "property", targetNamespace = "")
        PropertyValue property)
        throws WSFaultException
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNodeTypeIds", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNodeTypeIds")
    @ResponseWrapper(localName = "getNodeTypeIdsResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.GetNodeTypeIdsResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeTypeIdsRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/getNodeTypeIdsResponse")
    public List<String> getNodeTypeIds(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param testType
     * @param testId
     * @param sessionId
     * @throws WSFaultException
     */
    @WebMethod
    @RequestWrapper(localName = "automateTest", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AutomateTest")
    @ResponseWrapper(localName = "automateTestResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.AutomateTestResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/automateTestRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/automateTestResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/automateTest/Fault/WSFaultException")
    })
    public void automateTest(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "testId", targetNamespace = "")
        int testId,
        @WebParam(name = "testType", targetNamespace = "")
        String testType)
        throws WSFaultException
    ;

    /**
     * 
     * @param property
     * @param sessionId
     * @return
     *     returns boolean
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdateProperty")
    @ResponseWrapper(localName = "updatePropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.UpdatePropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updatePropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updatePropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/updateProperty/Fault/WSFaultException")
    })
    public boolean updateProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "property", targetNamespace = "")
        PropertyValue property)
        throws WSFaultException
    ;

    /**
     * 
     * @param property
     * @param sessionId
     * @return
     *     returns boolean
     * @throws WSFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteProperty", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeleteProperty")
    @ResponseWrapper(localName = "deletePropertyResponse", targetNamespace = "http://www.microfocus.com/silkcentral/webservices/tests", className = "com.microfocus.silkcentral.webservices.tests.stubs.DeletePropertyResponse")
    @Action(input = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deletePropertyRequest", output = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deletePropertyResponse", fault = {
        @FaultAction(className = WSFaultException.class, value = "http://www.microfocus.com/silkcentral/webservices/tests/TestsService/deleteProperty/Fault/WSFaultException")
    })
    public boolean deleteProperty(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "property", targetNamespace = "")
        PropertyValue property)
        throws WSFaultException
    ;

}
